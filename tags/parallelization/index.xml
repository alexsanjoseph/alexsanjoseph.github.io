<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>parallelization on Alex&#39;s Blog</title>
    <link>/tags/parallelization/</link>
    <description>Recent content in parallelization on Alex&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 06 Feb 2022 00:00:52 +0000</lastBuildDate><atom:link href="/tags/parallelization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Searching for RH Counterexamples in Golang - Improving Performance via Parallel processing</title>
      <link>/posts/rh-counterexamples-in-go-1_1-performance/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:52 +0000</pubDate>
      
      <guid>/posts/rh-counterexamples-in-go-1_1-performance/</guid>
      <description>Performance Although I had promised in the previous post to have follow the original series closely, a conversation with a friend prompted me to spend some time to see if I can improve upon the current performance of both Python and Golang by leveraging parallel processing. So we&amp;rsquo;re going to take a small detour to figure out if we can improve the function performance using parallel processing before coming back to the database implementation in the next post.</description>
    </item>
    
  </channel>
</rss>
